//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace NW.Payment.Wrappers.ReyPayWs {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="IWSPINbinding", Namespace="http://tempuri.org/")]
    public partial class IWSPINservice : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback NewCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPaymentNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback SmsStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSmsOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentCheckCallOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPayBackOperationCompleted;
        
        private System.Threading.SendOrPostCallback PayBackStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentEndDayOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback LinkPaymentCallOperationCompleted;
        
        private System.Threading.SendOrPostCallback LinkGetPaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback LinkPaymentCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentCallOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPaymentCallOperationCompleted;
        
        private System.Threading.SendOrPostCallback SmsStatusCallOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSmsCallOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentStatusCallOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReturnIdCheckCallOperationCompleted;
        
        private System.Threading.SendOrPostCallback SmsTimeOutCallOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostOkeyCallOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostOkeyCallNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApiKeyDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback Wallet_GetPaymentPayInOperationCompleted;
        
        private System.Threading.SendOrPostCallback Wallet_PaymentStatusPayInOperationCompleted;
        
        private System.Threading.SendOrPostCallback Wallet_CheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback Wallet_GetLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback Wallet_GetDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback Wallet_GetResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback Wallet_GetPaymentPayOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback Wallet_PaymentStatusPayOutOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public IWSPINservice() {
            this.Url = global::NW.Payment.Wrappers.Properties.Settings.Default.NW_Payment_Wrappers_ReyPayWs_IWSPINservice;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event NewCustomerCompletedEventHandler NewCustomerCompleted;
        
        /// <remarks/>
        public event GetPaymentCompletedEventHandler GetPaymentCompleted;
        
        /// <remarks/>
        public event GetPaymentNewCompletedEventHandler GetPaymentNewCompleted;
        
        /// <remarks/>
        public event SmsStatusCompletedEventHandler SmsStatusCompleted;
        
        /// <remarks/>
        public event GetSmsCompletedEventHandler GetSmsCompleted;
        
        /// <remarks/>
        public event PaymentStatusCompletedEventHandler PaymentStatusCompleted;
        
        /// <remarks/>
        public event PaymentCheckCompletedEventHandler PaymentCheckCompleted;
        
        /// <remarks/>
        public event PaymentCheckCallCompletedEventHandler PaymentCheckCallCompleted;
        
        /// <remarks/>
        public event PaymentListCompletedEventHandler PaymentListCompleted;
        
        /// <remarks/>
        public event GetPayBackCompletedEventHandler GetPayBackCompleted;
        
        /// <remarks/>
        public event PayBackStatusCompletedEventHandler PayBackStatusCompleted;
        
        /// <remarks/>
        public event PaymentEndDayCompletedEventHandler PaymentEndDayCompleted;
        
        /// <remarks/>
        public event CustomerDetailCompletedEventHandler CustomerDetailCompleted;
        
        /// <remarks/>
        public event LinkPaymentCallCompletedEventHandler LinkPaymentCallCompleted;
        
        /// <remarks/>
        public event LinkGetPaymentCompletedEventHandler LinkGetPaymentCompleted;
        
        /// <remarks/>
        public event LinkPaymentCheckCompletedEventHandler LinkPaymentCheckCompleted;
        
        /// <remarks/>
        public event PaymentCallCompletedEventHandler PaymentCallCompleted;
        
        /// <remarks/>
        public event GetPaymentCallCompletedEventHandler GetPaymentCallCompleted;
        
        /// <remarks/>
        public event SmsStatusCallCompletedEventHandler SmsStatusCallCompleted;
        
        /// <remarks/>
        public event GetSmsCallCompletedEventHandler GetSmsCallCompleted;
        
        /// <remarks/>
        public event PaymentStatusCallCompletedEventHandler PaymentStatusCallCompleted;
        
        /// <remarks/>
        public event ReturnIdCheckCallCompletedEventHandler ReturnIdCheckCallCompleted;
        
        /// <remarks/>
        public event SmsTimeOutCallCompletedEventHandler SmsTimeOutCallCompleted;
        
        /// <remarks/>
        public event PostOkeyCallCompletedEventHandler PostOkeyCallCompleted;
        
        /// <remarks/>
        public event PostOkeyCallNewCompletedEventHandler PostOkeyCallNewCompleted;
        
        /// <remarks/>
        public event ApiKeyDetailCompletedEventHandler ApiKeyDetailCompleted;
        
        /// <remarks/>
        public event Wallet_GetPaymentPayInCompletedEventHandler Wallet_GetPaymentPayInCompleted;
        
        /// <remarks/>
        public event Wallet_PaymentStatusPayInCompletedEventHandler Wallet_PaymentStatusPayInCompleted;
        
        /// <remarks/>
        public event Wallet_CheckCompletedEventHandler Wallet_CheckCompleted;
        
        /// <remarks/>
        public event Wallet_GetLoginCompletedEventHandler Wallet_GetLoginCompleted;
        
        /// <remarks/>
        public event Wallet_GetDetailCompletedEventHandler Wallet_GetDetailCompleted;
        
        /// <remarks/>
        public event Wallet_GetResultCompletedEventHandler Wallet_GetResultCompleted;
        
        /// <remarks/>
        public event Wallet_GetPaymentPayOutCompletedEventHandler Wallet_GetPaymentPayOutCompleted;
        
        /// <remarks/>
        public event Wallet_PaymentStatusPayOutCompletedEventHandler Wallet_PaymentStatusPayOutCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#NewCustomer", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string NewCustomer(
                    string wsuser, 
                    string wspass, 
                    string apikey, 
                    string name, 
                    string surname, 
                    string mail, 
                    string username, 
                    string password, 
                    string date_day, 
                    string date_month, 
                    string date_year, 
                    string country, 
                    string city, 
                    string zipcode, 
                    string adress, 
                    string phone, 
                    string identity) {
            object[] results = this.Invoke("NewCustomer", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        name,
                        surname,
                        mail,
                        username,
                        password,
                        date_day,
                        date_month,
                        date_year,
                        country,
                        city,
                        zipcode,
                        adress,
                        phone,
                        identity});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NewCustomerAsync(
                    string wsuser, 
                    string wspass, 
                    string apikey, 
                    string name, 
                    string surname, 
                    string mail, 
                    string username, 
                    string password, 
                    string date_day, 
                    string date_month, 
                    string date_year, 
                    string country, 
                    string city, 
                    string zipcode, 
                    string adress, 
                    string phone, 
                    string identity) {
            this.NewCustomerAsync(wsuser, wspass, apikey, name, surname, mail, username, password, date_day, date_month, date_year, country, city, zipcode, adress, phone, identity, null);
        }
        
        /// <remarks/>
        public void NewCustomerAsync(
                    string wsuser, 
                    string wspass, 
                    string apikey, 
                    string name, 
                    string surname, 
                    string mail, 
                    string username, 
                    string password, 
                    string date_day, 
                    string date_month, 
                    string date_year, 
                    string country, 
                    string city, 
                    string zipcode, 
                    string adress, 
                    string phone, 
                    string identity, 
                    object userState) {
            if ((this.NewCustomerOperationCompleted == null)) {
                this.NewCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewCustomerOperationCompleted);
            }
            this.InvokeAsync("NewCustomer", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        name,
                        surname,
                        mail,
                        username,
                        password,
                        date_day,
                        date_month,
                        date_year,
                        country,
                        city,
                        zipcode,
                        adress,
                        phone,
                        identity}, this.NewCustomerOperationCompleted, userState);
        }
        
        private void OnNewCustomerOperationCompleted(object arg) {
            if ((this.NewCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewCustomerCompleted(this, new NewCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#GetPayment", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetPayment(
                    string wsuser, 
                    string wspass, 
                    string apikey, 
                    string username, 
                    string password, 
                    string card_number1, 
                    string card_number2, 
                    string card_number3, 
                    string card_number4, 
                    string card_month, 
                    string card_year, 
                    string card_security, 
                    string card_name, 
                    string card_type, 
                    string ip, 
                    double price) {
            object[] results = this.Invoke("GetPayment", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        card_number1,
                        card_number2,
                        card_number3,
                        card_number4,
                        card_month,
                        card_year,
                        card_security,
                        card_name,
                        card_type,
                        ip,
                        price});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPaymentAsync(
                    string wsuser, 
                    string wspass, 
                    string apikey, 
                    string username, 
                    string password, 
                    string card_number1, 
                    string card_number2, 
                    string card_number3, 
                    string card_number4, 
                    string card_month, 
                    string card_year, 
                    string card_security, 
                    string card_name, 
                    string card_type, 
                    string ip, 
                    double price) {
            this.GetPaymentAsync(wsuser, wspass, apikey, username, password, card_number1, card_number2, card_number3, card_number4, card_month, card_year, card_security, card_name, card_type, ip, price, null);
        }
        
        /// <remarks/>
        public void GetPaymentAsync(
                    string wsuser, 
                    string wspass, 
                    string apikey, 
                    string username, 
                    string password, 
                    string card_number1, 
                    string card_number2, 
                    string card_number3, 
                    string card_number4, 
                    string card_month, 
                    string card_year, 
                    string card_security, 
                    string card_name, 
                    string card_type, 
                    string ip, 
                    double price, 
                    object userState) {
            if ((this.GetPaymentOperationCompleted == null)) {
                this.GetPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPaymentOperationCompleted);
            }
            this.InvokeAsync("GetPayment", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        card_number1,
                        card_number2,
                        card_number3,
                        card_number4,
                        card_month,
                        card_year,
                        card_security,
                        card_name,
                        card_type,
                        ip,
                        price}, this.GetPaymentOperationCompleted, userState);
        }
        
        private void OnGetPaymentOperationCompleted(object arg) {
            if ((this.GetPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPaymentCompleted(this, new GetPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#GetPaymentNew", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetPaymentNew(
                    string wsuser, 
                    string wspass, 
                    string apikey, 
                    string username, 
                    string password, 
                    string card_number1, 
                    string card_number2, 
                    string card_number3, 
                    string card_number4, 
                    string card_month, 
                    string card_year, 
                    string card_security, 
                    string card_name, 
                    string card_type, 
                    string ip, 
                    double price, 
                    string pos_dealer, 
                    string pos_submerchant, 
                    string customerref) {
            object[] results = this.Invoke("GetPaymentNew", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        card_number1,
                        card_number2,
                        card_number3,
                        card_number4,
                        card_month,
                        card_year,
                        card_security,
                        card_name,
                        card_type,
                        ip,
                        price,
                        pos_dealer,
                        pos_submerchant,
                        customerref});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPaymentNewAsync(
                    string wsuser, 
                    string wspass, 
                    string apikey, 
                    string username, 
                    string password, 
                    string card_number1, 
                    string card_number2, 
                    string card_number3, 
                    string card_number4, 
                    string card_month, 
                    string card_year, 
                    string card_security, 
                    string card_name, 
                    string card_type, 
                    string ip, 
                    double price, 
                    string pos_dealer, 
                    string pos_submerchant, 
                    string customerref) {
            this.GetPaymentNewAsync(wsuser, wspass, apikey, username, password, card_number1, card_number2, card_number3, card_number4, card_month, card_year, card_security, card_name, card_type, ip, price, pos_dealer, pos_submerchant, customerref, null);
        }
        
        /// <remarks/>
        public void GetPaymentNewAsync(
                    string wsuser, 
                    string wspass, 
                    string apikey, 
                    string username, 
                    string password, 
                    string card_number1, 
                    string card_number2, 
                    string card_number3, 
                    string card_number4, 
                    string card_month, 
                    string card_year, 
                    string card_security, 
                    string card_name, 
                    string card_type, 
                    string ip, 
                    double price, 
                    string pos_dealer, 
                    string pos_submerchant, 
                    string customerref, 
                    object userState) {
            if ((this.GetPaymentNewOperationCompleted == null)) {
                this.GetPaymentNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPaymentNewOperationCompleted);
            }
            this.InvokeAsync("GetPaymentNew", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        card_number1,
                        card_number2,
                        card_number3,
                        card_number4,
                        card_month,
                        card_year,
                        card_security,
                        card_name,
                        card_type,
                        ip,
                        price,
                        pos_dealer,
                        pos_submerchant,
                        customerref}, this.GetPaymentNewOperationCompleted, userState);
        }
        
        private void OnGetPaymentNewOperationCompleted(object arg) {
            if ((this.GetPaymentNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPaymentNewCompleted(this, new GetPaymentNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#SmsStatus", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string SmsStatus(string wsuser, string wspass, string apikey, string username, string password, string referencecode) {
            object[] results = this.Invoke("SmsStatus", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SmsStatusAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode) {
            this.SmsStatusAsync(wsuser, wspass, apikey, username, password, referencecode, null);
        }
        
        /// <remarks/>
        public void SmsStatusAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, object userState) {
            if ((this.SmsStatusOperationCompleted == null)) {
                this.SmsStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSmsStatusOperationCompleted);
            }
            this.InvokeAsync("SmsStatus", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode}, this.SmsStatusOperationCompleted, userState);
        }
        
        private void OnSmsStatusOperationCompleted(object arg) {
            if ((this.SmsStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SmsStatusCompleted(this, new SmsStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#GetSms", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetSms(string wsuser, string wspass, string apikey, string username, string password, string referencecode, string sms) {
            object[] results = this.Invoke("GetSms", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode,
                        sms});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSmsAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, string sms) {
            this.GetSmsAsync(wsuser, wspass, apikey, username, password, referencecode, sms, null);
        }
        
        /// <remarks/>
        public void GetSmsAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, string sms, object userState) {
            if ((this.GetSmsOperationCompleted == null)) {
                this.GetSmsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSmsOperationCompleted);
            }
            this.InvokeAsync("GetSms", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode,
                        sms}, this.GetSmsOperationCompleted, userState);
        }
        
        private void OnGetSmsOperationCompleted(object arg) {
            if ((this.GetSmsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSmsCompleted(this, new GetSmsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#PaymentStatus", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string PaymentStatus(string wsuser, string wspass, string apikey, string username, string password, string referencecode) {
            object[] results = this.Invoke("PaymentStatus", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentStatusAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode) {
            this.PaymentStatusAsync(wsuser, wspass, apikey, username, password, referencecode, null);
        }
        
        /// <remarks/>
        public void PaymentStatusAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, object userState) {
            if ((this.PaymentStatusOperationCompleted == null)) {
                this.PaymentStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentStatusOperationCompleted);
            }
            this.InvokeAsync("PaymentStatus", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode}, this.PaymentStatusOperationCompleted, userState);
        }
        
        private void OnPaymentStatusOperationCompleted(object arg) {
            if ((this.PaymentStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentStatusCompleted(this, new PaymentStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#PaymentCheck", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string PaymentCheck(string wsuser, string wspass, string apikey, string username, string password, string referencecode) {
            object[] results = this.Invoke("PaymentCheck", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentCheckAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode) {
            this.PaymentCheckAsync(wsuser, wspass, apikey, username, password, referencecode, null);
        }
        
        /// <remarks/>
        public void PaymentCheckAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, object userState) {
            if ((this.PaymentCheckOperationCompleted == null)) {
                this.PaymentCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentCheckOperationCompleted);
            }
            this.InvokeAsync("PaymentCheck", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode}, this.PaymentCheckOperationCompleted, userState);
        }
        
        private void OnPaymentCheckOperationCompleted(object arg) {
            if ((this.PaymentCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentCheckCompleted(this, new PaymentCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#PaymentCheckCall", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string PaymentCheckCall(string wsuser, string wspass, string apikey, string username, string password, string referencecode) {
            object[] results = this.Invoke("PaymentCheckCall", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentCheckCallAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode) {
            this.PaymentCheckCallAsync(wsuser, wspass, apikey, username, password, referencecode, null);
        }
        
        /// <remarks/>
        public void PaymentCheckCallAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, object userState) {
            if ((this.PaymentCheckCallOperationCompleted == null)) {
                this.PaymentCheckCallOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentCheckCallOperationCompleted);
            }
            this.InvokeAsync("PaymentCheckCall", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode}, this.PaymentCheckCallOperationCompleted, userState);
        }
        
        private void OnPaymentCheckCallOperationCompleted(object arg) {
            if ((this.PaymentCheckCallCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentCheckCallCompleted(this, new PaymentCheckCallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#PaymentList", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string PaymentList(string wsuser, string wspass, string apikey, string datevalue) {
            object[] results = this.Invoke("PaymentList", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        datevalue});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentListAsync(string wsuser, string wspass, string apikey, string datevalue) {
            this.PaymentListAsync(wsuser, wspass, apikey, datevalue, null);
        }
        
        /// <remarks/>
        public void PaymentListAsync(string wsuser, string wspass, string apikey, string datevalue, object userState) {
            if ((this.PaymentListOperationCompleted == null)) {
                this.PaymentListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentListOperationCompleted);
            }
            this.InvokeAsync("PaymentList", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        datevalue}, this.PaymentListOperationCompleted, userState);
        }
        
        private void OnPaymentListOperationCompleted(object arg) {
            if ((this.PaymentListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentListCompleted(this, new PaymentListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#GetPayBack", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetPayBack(string wsuser, string wspass, string apikey, string username, string password, string referencecode) {
            object[] results = this.Invoke("GetPayBack", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPayBackAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode) {
            this.GetPayBackAsync(wsuser, wspass, apikey, username, password, referencecode, null);
        }
        
        /// <remarks/>
        public void GetPayBackAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, object userState) {
            if ((this.GetPayBackOperationCompleted == null)) {
                this.GetPayBackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPayBackOperationCompleted);
            }
            this.InvokeAsync("GetPayBack", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode}, this.GetPayBackOperationCompleted, userState);
        }
        
        private void OnGetPayBackOperationCompleted(object arg) {
            if ((this.GetPayBackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPayBackCompleted(this, new GetPayBackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#PayBackStatus", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string PayBackStatus(string wsuser, string wspass, string apikey, string username, string password, string referencecode) {
            object[] results = this.Invoke("PayBackStatus", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PayBackStatusAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode) {
            this.PayBackStatusAsync(wsuser, wspass, apikey, username, password, referencecode, null);
        }
        
        /// <remarks/>
        public void PayBackStatusAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, object userState) {
            if ((this.PayBackStatusOperationCompleted == null)) {
                this.PayBackStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPayBackStatusOperationCompleted);
            }
            this.InvokeAsync("PayBackStatus", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode}, this.PayBackStatusOperationCompleted, userState);
        }
        
        private void OnPayBackStatusOperationCompleted(object arg) {
            if ((this.PayBackStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PayBackStatusCompleted(this, new PayBackStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#PaymentEndDay", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string PaymentEndDay(string wsuser, string wspass, string apikey, string datevalue) {
            object[] results = this.Invoke("PaymentEndDay", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        datevalue});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentEndDayAsync(string wsuser, string wspass, string apikey, string datevalue) {
            this.PaymentEndDayAsync(wsuser, wspass, apikey, datevalue, null);
        }
        
        /// <remarks/>
        public void PaymentEndDayAsync(string wsuser, string wspass, string apikey, string datevalue, object userState) {
            if ((this.PaymentEndDayOperationCompleted == null)) {
                this.PaymentEndDayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentEndDayOperationCompleted);
            }
            this.InvokeAsync("PaymentEndDay", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        datevalue}, this.PaymentEndDayOperationCompleted, userState);
        }
        
        private void OnPaymentEndDayOperationCompleted(object arg) {
            if ((this.PaymentEndDayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentEndDayCompleted(this, new PaymentEndDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#CustomerDetail", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string CustomerDetail(string wsuser, string wspass, string apikey, string customerid) {
            object[] results = this.Invoke("CustomerDetail", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        customerid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerDetailAsync(string wsuser, string wspass, string apikey, string customerid) {
            this.CustomerDetailAsync(wsuser, wspass, apikey, customerid, null);
        }
        
        /// <remarks/>
        public void CustomerDetailAsync(string wsuser, string wspass, string apikey, string customerid, object userState) {
            if ((this.CustomerDetailOperationCompleted == null)) {
                this.CustomerDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerDetailOperationCompleted);
            }
            this.InvokeAsync("CustomerDetail", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        customerid}, this.CustomerDetailOperationCompleted, userState);
        }
        
        private void OnCustomerDetailOperationCompleted(object arg) {
            if ((this.CustomerDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerDetailCompleted(this, new CustomerDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#LinkPaymentCall", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string LinkPaymentCall(string wsuser, string wspass, string apikey, string username, string password, string referencecode, double price, string failurl, string successurl) {
            object[] results = this.Invoke("LinkPaymentCall", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode,
                        price,
                        failurl,
                        successurl});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LinkPaymentCallAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, double price, string failurl, string successurl) {
            this.LinkPaymentCallAsync(wsuser, wspass, apikey, username, password, referencecode, price, failurl, successurl, null);
        }
        
        /// <remarks/>
        public void LinkPaymentCallAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, double price, string failurl, string successurl, object userState) {
            if ((this.LinkPaymentCallOperationCompleted == null)) {
                this.LinkPaymentCallOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLinkPaymentCallOperationCompleted);
            }
            this.InvokeAsync("LinkPaymentCall", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode,
                        price,
                        failurl,
                        successurl}, this.LinkPaymentCallOperationCompleted, userState);
        }
        
        private void OnLinkPaymentCallOperationCompleted(object arg) {
            if ((this.LinkPaymentCallCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LinkPaymentCallCompleted(this, new LinkPaymentCallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#LinkGetPayment", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string LinkGetPayment(
                    string wsuser, 
                    string wspass, 
                    string apikey, 
                    string username, 
                    string password, 
                    string card_number1, 
                    string card_number2, 
                    string card_number3, 
                    string card_number4, 
                    string card_month, 
                    string card_year, 
                    string card_security, 
                    string card_name, 
                    string card_type, 
                    string ip, 
                    double price, 
                    string returnid) {
            object[] results = this.Invoke("LinkGetPayment", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        card_number1,
                        card_number2,
                        card_number3,
                        card_number4,
                        card_month,
                        card_year,
                        card_security,
                        card_name,
                        card_type,
                        ip,
                        price,
                        returnid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LinkGetPaymentAsync(
                    string wsuser, 
                    string wspass, 
                    string apikey, 
                    string username, 
                    string password, 
                    string card_number1, 
                    string card_number2, 
                    string card_number3, 
                    string card_number4, 
                    string card_month, 
                    string card_year, 
                    string card_security, 
                    string card_name, 
                    string card_type, 
                    string ip, 
                    double price, 
                    string returnid) {
            this.LinkGetPaymentAsync(wsuser, wspass, apikey, username, password, card_number1, card_number2, card_number3, card_number4, card_month, card_year, card_security, card_name, card_type, ip, price, returnid, null);
        }
        
        /// <remarks/>
        public void LinkGetPaymentAsync(
                    string wsuser, 
                    string wspass, 
                    string apikey, 
                    string username, 
                    string password, 
                    string card_number1, 
                    string card_number2, 
                    string card_number3, 
                    string card_number4, 
                    string card_month, 
                    string card_year, 
                    string card_security, 
                    string card_name, 
                    string card_type, 
                    string ip, 
                    double price, 
                    string returnid, 
                    object userState) {
            if ((this.LinkGetPaymentOperationCompleted == null)) {
                this.LinkGetPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLinkGetPaymentOperationCompleted);
            }
            this.InvokeAsync("LinkGetPayment", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        card_number1,
                        card_number2,
                        card_number3,
                        card_number4,
                        card_month,
                        card_year,
                        card_security,
                        card_name,
                        card_type,
                        ip,
                        price,
                        returnid}, this.LinkGetPaymentOperationCompleted, userState);
        }
        
        private void OnLinkGetPaymentOperationCompleted(object arg) {
            if ((this.LinkGetPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LinkGetPaymentCompleted(this, new LinkGetPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#LinkPaymentCheck", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string LinkPaymentCheck(string wsuser, string wspass, string apikey, string username, string password, string referencecode) {
            object[] results = this.Invoke("LinkPaymentCheck", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LinkPaymentCheckAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode) {
            this.LinkPaymentCheckAsync(wsuser, wspass, apikey, username, password, referencecode, null);
        }
        
        /// <remarks/>
        public void LinkPaymentCheckAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, object userState) {
            if ((this.LinkPaymentCheckOperationCompleted == null)) {
                this.LinkPaymentCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLinkPaymentCheckOperationCompleted);
            }
            this.InvokeAsync("LinkPaymentCheck", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode}, this.LinkPaymentCheckOperationCompleted, userState);
        }
        
        private void OnLinkPaymentCheckOperationCompleted(object arg) {
            if ((this.LinkPaymentCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LinkPaymentCheckCompleted(this, new LinkPaymentCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#PaymentCall", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string PaymentCall(string wsuser, string wspass, string apikey, string username, string password, string referencecode, double price, string failurl, string successurl) {
            object[] results = this.Invoke("PaymentCall", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode,
                        price,
                        failurl,
                        successurl});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentCallAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, double price, string failurl, string successurl) {
            this.PaymentCallAsync(wsuser, wspass, apikey, username, password, referencecode, price, failurl, successurl, null);
        }
        
        /// <remarks/>
        public void PaymentCallAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, double price, string failurl, string successurl, object userState) {
            if ((this.PaymentCallOperationCompleted == null)) {
                this.PaymentCallOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentCallOperationCompleted);
            }
            this.InvokeAsync("PaymentCall", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode,
                        price,
                        failurl,
                        successurl}, this.PaymentCallOperationCompleted, userState);
        }
        
        private void OnPaymentCallOperationCompleted(object arg) {
            if ((this.PaymentCallCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentCallCompleted(this, new PaymentCallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#GetPaymentCall", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetPaymentCall(
                    string wsuser, 
                    string wspass, 
                    string apikey, 
                    string username, 
                    string password, 
                    string card_number1, 
                    string card_number2, 
                    string card_number3, 
                    string card_number4, 
                    string card_month, 
                    string card_year, 
                    string card_security, 
                    string card_name, 
                    string card_type, 
                    string ip, 
                    double price, 
                    string returnid) {
            object[] results = this.Invoke("GetPaymentCall", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        card_number1,
                        card_number2,
                        card_number3,
                        card_number4,
                        card_month,
                        card_year,
                        card_security,
                        card_name,
                        card_type,
                        ip,
                        price,
                        returnid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPaymentCallAsync(
                    string wsuser, 
                    string wspass, 
                    string apikey, 
                    string username, 
                    string password, 
                    string card_number1, 
                    string card_number2, 
                    string card_number3, 
                    string card_number4, 
                    string card_month, 
                    string card_year, 
                    string card_security, 
                    string card_name, 
                    string card_type, 
                    string ip, 
                    double price, 
                    string returnid) {
            this.GetPaymentCallAsync(wsuser, wspass, apikey, username, password, card_number1, card_number2, card_number3, card_number4, card_month, card_year, card_security, card_name, card_type, ip, price, returnid, null);
        }
        
        /// <remarks/>
        public void GetPaymentCallAsync(
                    string wsuser, 
                    string wspass, 
                    string apikey, 
                    string username, 
                    string password, 
                    string card_number1, 
                    string card_number2, 
                    string card_number3, 
                    string card_number4, 
                    string card_month, 
                    string card_year, 
                    string card_security, 
                    string card_name, 
                    string card_type, 
                    string ip, 
                    double price, 
                    string returnid, 
                    object userState) {
            if ((this.GetPaymentCallOperationCompleted == null)) {
                this.GetPaymentCallOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPaymentCallOperationCompleted);
            }
            this.InvokeAsync("GetPaymentCall", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        card_number1,
                        card_number2,
                        card_number3,
                        card_number4,
                        card_month,
                        card_year,
                        card_security,
                        card_name,
                        card_type,
                        ip,
                        price,
                        returnid}, this.GetPaymentCallOperationCompleted, userState);
        }
        
        private void OnGetPaymentCallOperationCompleted(object arg) {
            if ((this.GetPaymentCallCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPaymentCallCompleted(this, new GetPaymentCallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#SmsStatusCall", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string SmsStatusCall(string wsuser, string wspass, string apikey, string username, string password, string referencecode) {
            object[] results = this.Invoke("SmsStatusCall", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SmsStatusCallAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode) {
            this.SmsStatusCallAsync(wsuser, wspass, apikey, username, password, referencecode, null);
        }
        
        /// <remarks/>
        public void SmsStatusCallAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, object userState) {
            if ((this.SmsStatusCallOperationCompleted == null)) {
                this.SmsStatusCallOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSmsStatusCallOperationCompleted);
            }
            this.InvokeAsync("SmsStatusCall", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode}, this.SmsStatusCallOperationCompleted, userState);
        }
        
        private void OnSmsStatusCallOperationCompleted(object arg) {
            if ((this.SmsStatusCallCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SmsStatusCallCompleted(this, new SmsStatusCallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#GetSmsCall", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetSmsCall(string wsuser, string wspass, string apikey, string username, string password, string referencecode, string sms) {
            object[] results = this.Invoke("GetSmsCall", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode,
                        sms});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSmsCallAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, string sms) {
            this.GetSmsCallAsync(wsuser, wspass, apikey, username, password, referencecode, sms, null);
        }
        
        /// <remarks/>
        public void GetSmsCallAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, string sms, object userState) {
            if ((this.GetSmsCallOperationCompleted == null)) {
                this.GetSmsCallOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSmsCallOperationCompleted);
            }
            this.InvokeAsync("GetSmsCall", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode,
                        sms}, this.GetSmsCallOperationCompleted, userState);
        }
        
        private void OnGetSmsCallOperationCompleted(object arg) {
            if ((this.GetSmsCallCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSmsCallCompleted(this, new GetSmsCallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#PaymentStatusCall", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string PaymentStatusCall(string wsuser, string wspass, string apikey, string username, string password, string referencecode) {
            object[] results = this.Invoke("PaymentStatusCall", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentStatusCallAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode) {
            this.PaymentStatusCallAsync(wsuser, wspass, apikey, username, password, referencecode, null);
        }
        
        /// <remarks/>
        public void PaymentStatusCallAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, object userState) {
            if ((this.PaymentStatusCallOperationCompleted == null)) {
                this.PaymentStatusCallOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentStatusCallOperationCompleted);
            }
            this.InvokeAsync("PaymentStatusCall", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode}, this.PaymentStatusCallOperationCompleted, userState);
        }
        
        private void OnPaymentStatusCallOperationCompleted(object arg) {
            if ((this.PaymentStatusCallCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentStatusCallCompleted(this, new PaymentStatusCallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#ReturnIdCheckCall", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string ReturnIdCheckCall(string returnid) {
            object[] results = this.Invoke("ReturnIdCheckCall", new object[] {
                        returnid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReturnIdCheckCallAsync(string returnid) {
            this.ReturnIdCheckCallAsync(returnid, null);
        }
        
        /// <remarks/>
        public void ReturnIdCheckCallAsync(string returnid, object userState) {
            if ((this.ReturnIdCheckCallOperationCompleted == null)) {
                this.ReturnIdCheckCallOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReturnIdCheckCallOperationCompleted);
            }
            this.InvokeAsync("ReturnIdCheckCall", new object[] {
                        returnid}, this.ReturnIdCheckCallOperationCompleted, userState);
        }
        
        private void OnReturnIdCheckCallOperationCompleted(object arg) {
            if ((this.ReturnIdCheckCallCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReturnIdCheckCallCompleted(this, new ReturnIdCheckCallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#SmsTimeOutCall", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string SmsTimeOutCall(string referencecode) {
            object[] results = this.Invoke("SmsTimeOutCall", new object[] {
                        referencecode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SmsTimeOutCallAsync(string referencecode) {
            this.SmsTimeOutCallAsync(referencecode, null);
        }
        
        /// <remarks/>
        public void SmsTimeOutCallAsync(string referencecode, object userState) {
            if ((this.SmsTimeOutCallOperationCompleted == null)) {
                this.SmsTimeOutCallOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSmsTimeOutCallOperationCompleted);
            }
            this.InvokeAsync("SmsTimeOutCall", new object[] {
                        referencecode}, this.SmsTimeOutCallOperationCompleted, userState);
        }
        
        private void OnSmsTimeOutCallOperationCompleted(object arg) {
            if ((this.SmsTimeOutCallCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SmsTimeOutCallCompleted(this, new SmsTimeOutCallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#PostOkeyCall", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string PostOkeyCall(string wsuser, string wspass, string apikey, string customerref) {
            object[] results = this.Invoke("PostOkeyCall", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        customerref});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PostOkeyCallAsync(string wsuser, string wspass, string apikey, string customerref) {
            this.PostOkeyCallAsync(wsuser, wspass, apikey, customerref, null);
        }
        
        /// <remarks/>
        public void PostOkeyCallAsync(string wsuser, string wspass, string apikey, string customerref, object userState) {
            if ((this.PostOkeyCallOperationCompleted == null)) {
                this.PostOkeyCallOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostOkeyCallOperationCompleted);
            }
            this.InvokeAsync("PostOkeyCall", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        customerref}, this.PostOkeyCallOperationCompleted, userState);
        }
        
        private void OnPostOkeyCallOperationCompleted(object arg) {
            if ((this.PostOkeyCallCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostOkeyCallCompleted(this, new PostOkeyCallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#PostOkeyCallNew", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string PostOkeyCallNew(string wsuser, string wspass, string apikey, string customerref, string referencecode) {
            object[] results = this.Invoke("PostOkeyCallNew", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        customerref,
                        referencecode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PostOkeyCallNewAsync(string wsuser, string wspass, string apikey, string customerref, string referencecode) {
            this.PostOkeyCallNewAsync(wsuser, wspass, apikey, customerref, referencecode, null);
        }
        
        /// <remarks/>
        public void PostOkeyCallNewAsync(string wsuser, string wspass, string apikey, string customerref, string referencecode, object userState) {
            if ((this.PostOkeyCallNewOperationCompleted == null)) {
                this.PostOkeyCallNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostOkeyCallNewOperationCompleted);
            }
            this.InvokeAsync("PostOkeyCallNew", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        customerref,
                        referencecode}, this.PostOkeyCallNewOperationCompleted, userState);
        }
        
        private void OnPostOkeyCallNewOperationCompleted(object arg) {
            if ((this.PostOkeyCallNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostOkeyCallNewCompleted(this, new PostOkeyCallNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#ApiKeyDetail", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string ApiKeyDetail(string apikey) {
            object[] results = this.Invoke("ApiKeyDetail", new object[] {
                        apikey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ApiKeyDetailAsync(string apikey) {
            this.ApiKeyDetailAsync(apikey, null);
        }
        
        /// <remarks/>
        public void ApiKeyDetailAsync(string apikey, object userState) {
            if ((this.ApiKeyDetailOperationCompleted == null)) {
                this.ApiKeyDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApiKeyDetailOperationCompleted);
            }
            this.InvokeAsync("ApiKeyDetail", new object[] {
                        apikey}, this.ApiKeyDetailOperationCompleted, userState);
        }
        
        private void OnApiKeyDetailOperationCompleted(object arg) {
            if ((this.ApiKeyDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApiKeyDetailCompleted(this, new ApiKeyDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#Wallet_GetPaymentPayIn", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string Wallet_GetPaymentPayIn(string wsuser, string wspass, string apikey, string username, string password, string ip, double price, string success_url, string fail_url, string return_url, string customerref, string wallet_type) {
            object[] results = this.Invoke("Wallet_GetPaymentPayIn", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        ip,
                        price,
                        success_url,
                        fail_url,
                        return_url,
                        customerref,
                        wallet_type});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Wallet_GetPaymentPayInAsync(string wsuser, string wspass, string apikey, string username, string password, string ip, double price, string success_url, string fail_url, string return_url, string customerref, string wallet_type) {
            this.Wallet_GetPaymentPayInAsync(wsuser, wspass, apikey, username, password, ip, price, success_url, fail_url, return_url, customerref, wallet_type, null);
        }
        
        /// <remarks/>
        public void Wallet_GetPaymentPayInAsync(string wsuser, string wspass, string apikey, string username, string password, string ip, double price, string success_url, string fail_url, string return_url, string customerref, string wallet_type, object userState) {
            if ((this.Wallet_GetPaymentPayInOperationCompleted == null)) {
                this.Wallet_GetPaymentPayInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWallet_GetPaymentPayInOperationCompleted);
            }
            this.InvokeAsync("Wallet_GetPaymentPayIn", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        ip,
                        price,
                        success_url,
                        fail_url,
                        return_url,
                        customerref,
                        wallet_type}, this.Wallet_GetPaymentPayInOperationCompleted, userState);
        }
        
        private void OnWallet_GetPaymentPayInOperationCompleted(object arg) {
            if ((this.Wallet_GetPaymentPayInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Wallet_GetPaymentPayInCompleted(this, new Wallet_GetPaymentPayInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#Wallet_PaymentStatusPayIn", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string Wallet_PaymentStatusPayIn(string wsuser, string wspass, string apikey, string username, string password, string referencecode, string customerref) {
            object[] results = this.Invoke("Wallet_PaymentStatusPayIn", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode,
                        customerref});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Wallet_PaymentStatusPayInAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, string customerref) {
            this.Wallet_PaymentStatusPayInAsync(wsuser, wspass, apikey, username, password, referencecode, customerref, null);
        }
        
        /// <remarks/>
        public void Wallet_PaymentStatusPayInAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, string customerref, object userState) {
            if ((this.Wallet_PaymentStatusPayInOperationCompleted == null)) {
                this.Wallet_PaymentStatusPayInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWallet_PaymentStatusPayInOperationCompleted);
            }
            this.InvokeAsync("Wallet_PaymentStatusPayIn", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode,
                        customerref}, this.Wallet_PaymentStatusPayInOperationCompleted, userState);
        }
        
        private void OnWallet_PaymentStatusPayInOperationCompleted(object arg) {
            if ((this.Wallet_PaymentStatusPayInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Wallet_PaymentStatusPayInCompleted(this, new Wallet_PaymentStatusPayInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#Wallet_Check", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string Wallet_Check(string referencecode) {
            object[] results = this.Invoke("Wallet_Check", new object[] {
                        referencecode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Wallet_CheckAsync(string referencecode) {
            this.Wallet_CheckAsync(referencecode, null);
        }
        
        /// <remarks/>
        public void Wallet_CheckAsync(string referencecode, object userState) {
            if ((this.Wallet_CheckOperationCompleted == null)) {
                this.Wallet_CheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWallet_CheckOperationCompleted);
            }
            this.InvokeAsync("Wallet_Check", new object[] {
                        referencecode}, this.Wallet_CheckOperationCompleted, userState);
        }
        
        private void OnWallet_CheckOperationCompleted(object arg) {
            if ((this.Wallet_CheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Wallet_CheckCompleted(this, new Wallet_CheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#Wallet_GetLogin", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string Wallet_GetLogin(string wsuser, string wspass, string apikey, string username, string password, string referencecode, string walletuser, string walletpass, string captcha) {
            object[] results = this.Invoke("Wallet_GetLogin", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode,
                        walletuser,
                        walletpass,
                        captcha});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Wallet_GetLoginAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, string walletuser, string walletpass, string captcha) {
            this.Wallet_GetLoginAsync(wsuser, wspass, apikey, username, password, referencecode, walletuser, walletpass, captcha, null);
        }
        
        /// <remarks/>
        public void Wallet_GetLoginAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, string walletuser, string walletpass, string captcha, object userState) {
            if ((this.Wallet_GetLoginOperationCompleted == null)) {
                this.Wallet_GetLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWallet_GetLoginOperationCompleted);
            }
            this.InvokeAsync("Wallet_GetLogin", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode,
                        walletuser,
                        walletpass,
                        captcha}, this.Wallet_GetLoginOperationCompleted, userState);
        }
        
        private void OnWallet_GetLoginOperationCompleted(object arg) {
            if ((this.Wallet_GetLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Wallet_GetLoginCompleted(this, new Wallet_GetLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#Wallet_GetDetail", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string Wallet_GetDetail(string wsuser, string wspass, string apikey, string username, string password, string referencecode, string otpsmscode, string token, string walletcode, string walletcodeid, string name_surname, double walletbakiye) {
            object[] results = this.Invoke("Wallet_GetDetail", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode,
                        otpsmscode,
                        token,
                        walletcode,
                        walletcodeid,
                        name_surname,
                        walletbakiye});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Wallet_GetDetailAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, string otpsmscode, string token, string walletcode, string walletcodeid, string name_surname, double walletbakiye) {
            this.Wallet_GetDetailAsync(wsuser, wspass, apikey, username, password, referencecode, otpsmscode, token, walletcode, walletcodeid, name_surname, walletbakiye, null);
        }
        
        /// <remarks/>
        public void Wallet_GetDetailAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, string otpsmscode, string token, string walletcode, string walletcodeid, string name_surname, double walletbakiye, object userState) {
            if ((this.Wallet_GetDetailOperationCompleted == null)) {
                this.Wallet_GetDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWallet_GetDetailOperationCompleted);
            }
            this.InvokeAsync("Wallet_GetDetail", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode,
                        otpsmscode,
                        token,
                        walletcode,
                        walletcodeid,
                        name_surname,
                        walletbakiye}, this.Wallet_GetDetailOperationCompleted, userState);
        }
        
        private void OnWallet_GetDetailOperationCompleted(object arg) {
            if ((this.Wallet_GetDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Wallet_GetDetailCompleted(this, new Wallet_GetDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#Wallet_GetResult", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string Wallet_GetResult(string wsuser, string wspass, string apikey, string username, string password, string referencecode, string ref_id, string result_code, string error_code, string error_message) {
            object[] results = this.Invoke("Wallet_GetResult", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode,
                        ref_id,
                        result_code,
                        error_code,
                        error_message});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Wallet_GetResultAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, string ref_id, string result_code, string error_code, string error_message) {
            this.Wallet_GetResultAsync(wsuser, wspass, apikey, username, password, referencecode, ref_id, result_code, error_code, error_message, null);
        }
        
        /// <remarks/>
        public void Wallet_GetResultAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, string ref_id, string result_code, string error_code, string error_message, object userState) {
            if ((this.Wallet_GetResultOperationCompleted == null)) {
                this.Wallet_GetResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWallet_GetResultOperationCompleted);
            }
            this.InvokeAsync("Wallet_GetResult", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode,
                        ref_id,
                        result_code,
                        error_code,
                        error_message}, this.Wallet_GetResultOperationCompleted, userState);
        }
        
        private void OnWallet_GetResultOperationCompleted(object arg) {
            if ((this.Wallet_GetResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Wallet_GetResultCompleted(this, new Wallet_GetResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#Wallet_GetPaymentPayOut", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string Wallet_GetPaymentPayOut(string wsuser, string wspass, string apikey, string username, string password, string walletnumber, string ip, double price, string return_url, string customerref, string wallet_type) {
            object[] results = this.Invoke("Wallet_GetPaymentPayOut", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        walletnumber,
                        ip,
                        price,
                        return_url,
                        customerref,
                        wallet_type});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Wallet_GetPaymentPayOutAsync(string wsuser, string wspass, string apikey, string username, string password, string walletnumber, string ip, double price, string return_url, string customerref, string wallet_type) {
            this.Wallet_GetPaymentPayOutAsync(wsuser, wspass, apikey, username, password, walletnumber, ip, price, return_url, customerref, wallet_type, null);
        }
        
        /// <remarks/>
        public void Wallet_GetPaymentPayOutAsync(string wsuser, string wspass, string apikey, string username, string password, string walletnumber, string ip, double price, string return_url, string customerref, string wallet_type, object userState) {
            if ((this.Wallet_GetPaymentPayOutOperationCompleted == null)) {
                this.Wallet_GetPaymentPayOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWallet_GetPaymentPayOutOperationCompleted);
            }
            this.InvokeAsync("Wallet_GetPaymentPayOut", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        walletnumber,
                        ip,
                        price,
                        return_url,
                        customerref,
                        wallet_type}, this.Wallet_GetPaymentPayOutOperationCompleted, userState);
        }
        
        private void OnWallet_GetPaymentPayOutOperationCompleted(object arg) {
            if ((this.Wallet_GetPaymentPayOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Wallet_GetPaymentPayOutCompleted(this, new Wallet_GetPaymentPayOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WSPINIntf-IWSPIN#Wallet_PaymentStatusPayOut", RequestNamespace="urn:WSPINIntf-IWSPIN", ResponseNamespace="urn:WSPINIntf-IWSPIN")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string Wallet_PaymentStatusPayOut(string wsuser, string wspass, string apikey, string username, string password, string referencecode, string customerref) {
            object[] results = this.Invoke("Wallet_PaymentStatusPayOut", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode,
                        customerref});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Wallet_PaymentStatusPayOutAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, string customerref) {
            this.Wallet_PaymentStatusPayOutAsync(wsuser, wspass, apikey, username, password, referencecode, customerref, null);
        }
        
        /// <remarks/>
        public void Wallet_PaymentStatusPayOutAsync(string wsuser, string wspass, string apikey, string username, string password, string referencecode, string customerref, object userState) {
            if ((this.Wallet_PaymentStatusPayOutOperationCompleted == null)) {
                this.Wallet_PaymentStatusPayOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWallet_PaymentStatusPayOutOperationCompleted);
            }
            this.InvokeAsync("Wallet_PaymentStatusPayOut", new object[] {
                        wsuser,
                        wspass,
                        apikey,
                        username,
                        password,
                        referencecode,
                        customerref}, this.Wallet_PaymentStatusPayOutOperationCompleted, userState);
        }
        
        private void OnWallet_PaymentStatusPayOutOperationCompleted(object arg) {
            if ((this.Wallet_PaymentStatusPayOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Wallet_PaymentStatusPayOutCompleted(this, new Wallet_PaymentStatusPayOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void NewCustomerCompletedEventHandler(object sender, NewCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPaymentCompletedEventHandler(object sender, GetPaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPaymentNewCompletedEventHandler(object sender, GetPaymentNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPaymentNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPaymentNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SmsStatusCompletedEventHandler(object sender, SmsStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SmsStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SmsStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetSmsCompletedEventHandler(object sender, GetSmsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSmsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSmsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PaymentStatusCompletedEventHandler(object sender, PaymentStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PaymentCheckCompletedEventHandler(object sender, PaymentCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PaymentCheckCallCompletedEventHandler(object sender, PaymentCheckCallCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentCheckCallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentCheckCallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PaymentListCompletedEventHandler(object sender, PaymentListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPayBackCompletedEventHandler(object sender, GetPayBackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPayBackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPayBackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PayBackStatusCompletedEventHandler(object sender, PayBackStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PayBackStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PayBackStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PaymentEndDayCompletedEventHandler(object sender, PaymentEndDayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentEndDayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentEndDayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CustomerDetailCompletedEventHandler(object sender, CustomerDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void LinkPaymentCallCompletedEventHandler(object sender, LinkPaymentCallCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LinkPaymentCallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LinkPaymentCallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void LinkGetPaymentCompletedEventHandler(object sender, LinkGetPaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LinkGetPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LinkGetPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void LinkPaymentCheckCompletedEventHandler(object sender, LinkPaymentCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LinkPaymentCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LinkPaymentCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PaymentCallCompletedEventHandler(object sender, PaymentCallCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentCallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentCallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPaymentCallCompletedEventHandler(object sender, GetPaymentCallCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPaymentCallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPaymentCallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SmsStatusCallCompletedEventHandler(object sender, SmsStatusCallCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SmsStatusCallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SmsStatusCallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetSmsCallCompletedEventHandler(object sender, GetSmsCallCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSmsCallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSmsCallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PaymentStatusCallCompletedEventHandler(object sender, PaymentStatusCallCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentStatusCallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentStatusCallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ReturnIdCheckCallCompletedEventHandler(object sender, ReturnIdCheckCallCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReturnIdCheckCallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReturnIdCheckCallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SmsTimeOutCallCompletedEventHandler(object sender, SmsTimeOutCallCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SmsTimeOutCallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SmsTimeOutCallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PostOkeyCallCompletedEventHandler(object sender, PostOkeyCallCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostOkeyCallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostOkeyCallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PostOkeyCallNewCompletedEventHandler(object sender, PostOkeyCallNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostOkeyCallNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostOkeyCallNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ApiKeyDetailCompletedEventHandler(object sender, ApiKeyDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApiKeyDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ApiKeyDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Wallet_GetPaymentPayInCompletedEventHandler(object sender, Wallet_GetPaymentPayInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Wallet_GetPaymentPayInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Wallet_GetPaymentPayInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Wallet_PaymentStatusPayInCompletedEventHandler(object sender, Wallet_PaymentStatusPayInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Wallet_PaymentStatusPayInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Wallet_PaymentStatusPayInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Wallet_CheckCompletedEventHandler(object sender, Wallet_CheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Wallet_CheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Wallet_CheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Wallet_GetLoginCompletedEventHandler(object sender, Wallet_GetLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Wallet_GetLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Wallet_GetLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Wallet_GetDetailCompletedEventHandler(object sender, Wallet_GetDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Wallet_GetDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Wallet_GetDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Wallet_GetResultCompletedEventHandler(object sender, Wallet_GetResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Wallet_GetResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Wallet_GetResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Wallet_GetPaymentPayOutCompletedEventHandler(object sender, Wallet_GetPaymentPayOutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Wallet_GetPaymentPayOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Wallet_GetPaymentPayOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Wallet_PaymentStatusPayOutCompletedEventHandler(object sender, Wallet_PaymentStatusPayOutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Wallet_PaymentStatusPayOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Wallet_PaymentStatusPayOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591